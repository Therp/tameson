stages:
  - format
  - create_seed
  - testing
precommit:
  stage: format
  before_script:
    - |
      # ALL PATHS ARE ABSOLUTE
      # Install pyenv
      CFLAGS="-O2"
      echo "Project Path slug $CI_PROJECT_PATH_SLUG"
      echo "CI JOB ID: $CI_JOB_ID"
      WORKDIR=$HOME/pipelines/$CI_PROJECT_PATH_SLUG
      echo "Work directory: $WORKDIR"
      if [ ! -d $HOME/pipelines/$CI_PROJECT_PATH_SLUG ]; then
            mkdir -p $HOME/pipelines/$CI_PROJECT_PATH_SLUG
      fi
      PYENV_ROOT=$WORKDIR/.pyenv
      if [ ! -d $PYENV_ROOT ]; then
        /bin/echo "INFO: Clone https://github.com/pyenv/pyenv in $PYENV_ROOT"
        /usr/bin/git clone https://github.com/pyenv/pyenv $PYENV_ROOT
      else
        /bin/echo "INFO: $WORKDIR/.pyenv exist! Upgrading to latest..."
        cd $PYENV_ROOT && /usr/bin/git checkout master && /usr/bin/git pull origin master && cd - || { echo 'Failed to upgrade pyenv'; exit 1; }
      fi
      echo "INSTALLING PYENV"
      echo 'setting paths for pyenv'
      PATH=$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
      PYENV=$PYENV_ROOT/bin/pyenv
      eval "$($PYENV init -)"
      echo "INSTALLED PYENV VERSION"
      $PYENV -v
      which pyenv
      echo setting python version
      PYVERSION=3.8.9
      echo "init pyenv"
      echo "installing python version $PYVERSION"
      $PYENV install -s $PYVERSION
      $PYENV local $PYVERSION
      # Install virtualenv
      # Virtual env does not have subversion we explicitly give it here
      VIRTUALENV_VERSION=3.9
      VIRTUALENV=$PYENV_ROOT/bin/virtualenv.pyz
      if [ ! -d $WORKDIR/.venv ]; then
        /bin/echo "INFO: Download $VIRTUALENV"
        /usr/bin/wget -nv --no-check-certificate https://bootstrap.pypa.io/virtualenv/$VIRTUALENV_VERSION/virtualenv.pyz -O $VIRTUALENV || { echo 'Download of virtualenv package failed' ; exit 1; }
        /bin/echo "INFO: Build virtual environment in $WORKDIR/.venv"
        python $VIRTUALENV --python=$PYVERSION $WORKDIR/.venv || { echo 'Virtualenv creation failed' ; exit 1; }
      else
        /bin/echo "INFO: $WORKDIR/.venv exist!"
      fi
      echo "activating $WORKDIR/.venv virtualenvironment for this job"
      . $WORKDIR/.venv/bin/activate
      PYVERSION=$(python -V 2>&1 |sed -rn 's/Python (.*)\..*/\1/p')
      echo "Python version is $PYVERSION,  interpreter is $(which python) , $(python -V) "
      # Install pre-commit
      pip install pre-commit
      which pre-commit
      pre-commit clean
  script:
    - |
      source $WORKDIR/.venv/bin/activate
      git fetch origin 13.0
      pre-commit run --from-ref FETCH_HEAD --to-ref HEAD
  only:
    - merge_requests
  allow_failure: true
create_seed:
  stage: create_seed
  variables:
    SCRIPTS_REPO: git@gitlab.therp.nl:therp/therp-ci-templates
    SCRIPTS_BRANCH: ci-scripts
  before_script:
    - |
      # CONFIGURATION Area
      # name of deploy branch (usually build-XX.0-production)
      DEPLOY_BRANCH=build-13.0-production
      # Python version for build and virtualenv
      BUILD_PYTHON_VER=3.8.15
      MASTER_BRANCH=13.0
      ODOO_VERSION=13.0
      deployment_method=waft
      main_repo_alias_folder_in_yaml=therp/tameson
      main_repo_alias_remote_in_yaml=origin
      filestore_root=/home/ubuntu/.local/share/Odoo/filestore
      echo "filestore root: $filestore_root"
      manifest_name=__manifest__.py
      declare -a MODULE_EXCLUSION_LIST=()
      echo MODULE INSTALL EXCLUSION LIST FOR THIS PROJECT;
      for exclusion in ${MODULE_EXCLUSION_LIST[@]};
          do echo $exclusion;
      done;
      echo END EXLCUSION LIST
      # ========================END CONFIGURATION AREA ========================================
      alias git="/usr/bin/git"
      SCRIPTS_DIR=$(mktemp -d)
      cd $SCRIPTS_DIR
      echo scripts dir is $SCRIPTS_DIR
      git clone -q --branch "$SCRIPTS_BRANCH" --depth 1 "$SCRIPTS_REPO" "${SCRIPTS_DIR}/scripts"
      SCRIPTS_DIR=${SCRIPTS_DIR}/scripts
      echo scripts dir is $SCRIPTS_DIR
      LAST_PRODUCTION_HASH=$(source $SCRIPTS_DIR/check_hash)
      echo last production hash is $LAST_PRODUCTION_HASH
      TESTING_FOLDER_NAME="TEST_${CI_PROJECT_NAME}_${LAST_PRODUCTION_HASH}"
      TESTING_FOLDER=$HOME/$TESTING_FOLDER_NAME
      mkdir -p $TESTING_FOLDER
      cd $TESTING_FOLDER
      echo executing $SCRIPTS_DIR/create_seed_before_script
      source $SCRIPTS_DIR/create_seed_before_script
  script: echo executing create_seed_script source $SCRIPTS_DIR/create_seed_script
  only:
    - merge_requests
  allow_failure: true
tests:
  stage: testing
  variables:
    SCRIPTS_REPO: git@gitlab.therp.nl:therp/therp-ci-templates
    SCRIPTS_BRANCH: ci-scripts
    DEPLOY_BRANCH: build-13.0-accept-unpinned
  script:
    - |
      SCRIPTS_DIR=$(mktemp -d)
      cd $SCRIPTS_DIR
      git clone -q --branch "$SCRIPTS_BRANCH" --depth 1 "$SCRIPTS_REPO" "$SCRIPTS_DIR/scripts"
      SCRIPTS_DIR=${SCRIPTS_DIR}/scripts
      LAST_PRODUCTION_HASH=$(source $SCRIPTS_DIR/check_hash)
      TESTING_FOLDER_NAME="TEST_${CI_PROJECT_NAME}_${LAST_PRODUCTION_HASH}"
      TESTING_FOLDER=$HOME/$TESTING_FOLDER_NAME
      mkdir -p $TESTING_FOLDER
      cd $TESTING_FOLDER
      source $SCRIPTS_DIR/test_script
      rm -rf $SCRIPTS_DIR
  only:
    - merge_requests
  timeout: 2h
  dependencies:
    - create_seed
  allow_failure: true
